/**
 * generated by Xtext 2.14.0
 */
package com.zazuko.experimental.rmdsl.generator;

import com.google.common.collect.Iterators;
import com.zazuko.experimental.rmdsl.generator.R2rmlDialect;
import com.zazuko.experimental.rmdsl.generator.RmlDialect;
import com.zazuko.experimental.rmdsl.generator.RmlDialectGenerator;
import com.zazuko.experimental.rmdsl.rdfMapping.Mapping;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RdfMappingGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Iterable<Mapping> mappings = IteratorExtensions.<Mapping>toList(Iterators.<Mapping>filter(resource.getAllContents(), Mapping.class));
    boolean _isEmpty = IterableExtensions.isEmpty(mappings);
    boolean _not = (!_isEmpty);
    if (_not) {
      final String dslFileName = resource.getURI().lastSegment().toString();
      final String outFileBase = dslFileName.substring(0, dslFileName.lastIndexOf("."));
      R2rmlDialect _r2rmlDialect = new R2rmlDialect();
      final RmlDialectGenerator r2rmlGenerator = new RmlDialectGenerator(_r2rmlDialect);
      fsa.generateFile((outFileBase + ".r2rml.ttl"), r2rmlGenerator.generateTurtle(mappings));
      RmlDialect _rmlDialect = new RmlDialect();
      final RmlDialectGenerator rmlGenerator = new RmlDialectGenerator(_rmlDialect);
      fsa.generateFile((outFileBase + ".rml.ttl"), rmlGenerator.generateTurtle(mappings));
    }
  }
}
