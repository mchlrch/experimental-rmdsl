/**
 * generated by Xtext 2.14.0
 */
package com.zazuko.experimental.rmdsl.generator;

import com.google.common.collect.Iterators;
import com.zazuko.experimental.rmdsl.rdfMapping.Mapping;
import java.text.MessageFormat;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RdfMappingGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    CharSequence _prefixes = this.prefixes();
    final Function1<Mapping, CharSequence> _function = (Mapping it) -> {
      return this.triplesMap(it);
    };
    String _join = IteratorExtensions.join(IteratorExtensions.<Mapping, CharSequence>map(Iterators.<Mapping>filter(resource.getAllContents(), Mapping.class), _function), "\n");
    String _plus = (_prefixes + _join);
    fsa.generateFile("mapping.ttl", _plus);
  }
  
  public CharSequence prefixes() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@prefix rr: <http://www.w3.org/ns/r2rml#>.");
    _builder.newLine();
    _builder.append("@prefix rml: <http://semweb.mmlab.be/ns/rml#>.");
    _builder.newLine();
    _builder.append("@prefix ql: <http://semweb.mmlab.be/ns/ql#>.");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence triplesMap(final Mapping m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<#");
    String _name = m.getName();
    _builder.append(_name);
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("rml:logicalSource [");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rml:source \"");
    String _source = m.getSource().getSource();
    _builder.append(_source, "    ");
    _builder.append("\" ;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("rml:referenceFormulation ");
    String _referenceFormulation = m.getSource().getType().getReferenceFormulation();
    _builder.append(_referenceFormulation, "    ");
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("rr:subjectMap [");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("rr:template \"");
    String _subjectIri = this.subjectIri(m);
    _builder.append(_subjectIri, "    ");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("# rr:class foo:Bar ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("];");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    return _builder;
  }
  
  public String subjectIri(final Mapping m) {
    String _pattern = m.getPattern();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    String _value = m.getReference().getValue();
    _builder.append(_value);
    _builder.append("}");
    return MessageFormat.format(_pattern, _builder);
  }
}
