/**
 * generated by Xtext 2.14.0
 */
package com.zazuko.experimental.rmdsl.rdfMapping.util;

import com.zazuko.experimental.rmdsl.rdfMapping.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.zazuko.experimental.rmdsl.rdfMapping.RdfMappingPackage
 * @generated
 */
public class RdfMappingSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static RdfMappingPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RdfMappingSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = RdfMappingPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case RdfMappingPackage.DOMAINMODEL:
      {
        Domainmodel domainmodel = (Domainmodel)theEObject;
        T result = caseDomainmodel(domainmodel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.SOURCE_TYPES_DEFINITION:
      {
        SourceTypesDefinition sourceTypesDefinition = (SourceTypesDefinition)theEObject;
        T result = caseSourceTypesDefinition(sourceTypesDefinition);
        if (result == null) result = caseElement(sourceTypesDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.SOURCE_TYPE:
      {
        SourceType sourceType = (SourceType)theEObject;
        T result = caseSourceType(sourceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.DATATYPES_DEFINITION:
      {
        DatatypesDefinition datatypesDefinition = (DatatypesDefinition)theEObject;
        T result = caseDatatypesDefinition(datatypesDefinition);
        if (result == null) result = casePrefixHolder(datatypesDefinition);
        if (result == null) result = caseElement(datatypesDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.DATATYPE:
      {
        Datatype datatype = (Datatype)theEObject;
        T result = caseDatatype(datatype);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.LANGUAGE_TAG_DEFINITION:
      {
        LanguageTagDefinition languageTagDefinition = (LanguageTagDefinition)theEObject;
        T result = caseLanguageTagDefinition(languageTagDefinition);
        if (result == null) result = caseElement(languageTagDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.LANGUAGE_TAG:
      {
        LanguageTag languageTag = (LanguageTag)theEObject;
        T result = caseLanguageTag(languageTag);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.SOURCE_GROUP:
      {
        SourceGroup sourceGroup = (SourceGroup)theEObject;
        T result = caseSourceGroup(sourceGroup);
        if (result == null) result = caseElement(sourceGroup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.LOGICAL_SOURCE:
      {
        LogicalSource logicalSource = (LogicalSource)theEObject;
        T result = caseLogicalSource(logicalSource);
        if (result == null) result = caseElement(logicalSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.REFERENCEABLE:
      {
        Referenceable referenceable = (Referenceable)theEObject;
        T result = caseReferenceable(referenceable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.VOCABULARY:
      {
        Vocabulary vocabulary = (Vocabulary)theEObject;
        T result = caseVocabulary(vocabulary);
        if (result == null) result = casePrefixHolder(vocabulary);
        if (result == null) result = caseElement(vocabulary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.PREFIX_HOLDER:
      {
        PrefixHolder prefixHolder = (PrefixHolder)theEObject;
        T result = casePrefixHolder(prefixHolder);
        if (result == null) result = caseElement(prefixHolder);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.PREFIX:
      {
        Prefix prefix = (Prefix)theEObject;
        T result = casePrefix(prefix);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.RDF_PROPERTY:
      {
        RdfProperty rdfProperty = (RdfProperty)theEObject;
        T result = caseRdfProperty(rdfProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.RDF_CLASS:
      {
        RdfClass rdfClass = (RdfClass)theEObject;
        T result = caseRdfClass(rdfClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.MAPPING:
      {
        Mapping mapping = (Mapping)theEObject;
        T result = caseMapping(mapping);
        if (result == null) result = caseElement(mapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.SUBJECT_TYPE_MAPPING:
      {
        SubjectTypeMapping subjectTypeMapping = (SubjectTypeMapping)theEObject;
        T result = caseSubjectTypeMapping(subjectTypeMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.PREDICATE_OBJECT_MAPPING:
      {
        PredicateObjectMapping predicateObjectMapping = (PredicateObjectMapping)theEObject;
        T result = casePredicateObjectMapping(predicateObjectMapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.VALUED_TERM:
      {
        ValuedTerm valuedTerm = (ValuedTerm)theEObject;
        T result = caseValuedTerm(valuedTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.REFERENCE_VALUED_TERM:
      {
        ReferenceValuedTerm referenceValuedTerm = (ReferenceValuedTerm)theEObject;
        T result = caseReferenceValuedTerm(referenceValuedTerm);
        if (result == null) result = caseValuedTerm(referenceValuedTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.TEMPLATE_VALUED_TERM:
      {
        TemplateValuedTerm templateValuedTerm = (TemplateValuedTerm)theEObject;
        T result = caseTemplateValuedTerm(templateValuedTerm);
        if (result == null) result = caseValuedTerm(templateValuedTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.LINKED_RESOURCE_TERM:
      {
        LinkedResourceTerm linkedResourceTerm = (LinkedResourceTerm)theEObject;
        T result = caseLinkedResourceTerm(linkedResourceTerm);
        if (result == null) result = caseValuedTerm(linkedResourceTerm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case RdfMappingPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = caseElement(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domainmodel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domainmodel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomainmodel(Domainmodel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Source Types Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Source Types Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSourceTypesDefinition(SourceTypesDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Source Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Source Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSourceType(SourceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Datatypes Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Datatypes Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatatypesDefinition(DatatypesDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Datatype</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Datatype</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatatype(Datatype object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Language Tag Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Language Tag Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLanguageTagDefinition(LanguageTagDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Language Tag</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Language Tag</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLanguageTag(LanguageTag object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Source Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Source Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSourceGroup(SourceGroup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalSource(LogicalSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Referenceable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Referenceable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferenceable(Referenceable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vocabulary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vocabulary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVocabulary(Vocabulary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefix Holder</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefix Holder</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrefixHolder(PrefixHolder object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Prefix</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Prefix</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrefix(Prefix object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rdf Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rdf Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRdfProperty(RdfProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rdf Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rdf Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRdfClass(RdfClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapping(Mapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subject Type Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subject Type Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubjectTypeMapping(SubjectTypeMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Predicate Object Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Predicate Object Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePredicateObjectMapping(PredicateObjectMapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Valued Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Valued Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValuedTerm(ValuedTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference Valued Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference Valued Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferenceValuedTerm(ReferenceValuedTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template Valued Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template Valued Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplateValuedTerm(TemplateValuedTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Linked Resource Term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Linked Resource Term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLinkedResourceTerm(LinkedResourceTerm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //RdfMappingSwitch
