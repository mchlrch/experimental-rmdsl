/**
 * generated by Xtext 2.14.0
 */
package com.zazuko.experimental.rmdsl.rdfMapping.impl;

import com.zazuko.experimental.rmdsl.rdfMapping.LogicalSource;
import com.zazuko.experimental.rmdsl.rdfMapping.Mapping;
import com.zazuko.experimental.rmdsl.rdfMapping.PredicateObjectMapping;
import com.zazuko.experimental.rmdsl.rdfMapping.RdfMappingPackage;
import com.zazuko.experimental.rmdsl.rdfMapping.Referenceable;
import com.zazuko.experimental.rmdsl.rdfMapping.SubjectTypeMapping;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.MappingImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.MappingImpl#getSource <em>Source</em>}</li>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.MappingImpl#getPattern <em>Pattern</em>}</li>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.MappingImpl#getReference <em>Reference</em>}</li>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.MappingImpl#getSubjectTypeMappings <em>Subject Type Mappings</em>}</li>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.MappingImpl#getPoMappings <em>Po Mappings</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MappingImpl extends ElementImpl implements Mapping
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected LogicalSource source;

  /**
   * The default value of the '{@link #getPattern() <em>Pattern</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPattern()
   * @generated
   * @ordered
   */
  protected static final String PATTERN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPattern() <em>Pattern</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPattern()
   * @generated
   * @ordered
   */
  protected String pattern = PATTERN_EDEFAULT;

  /**
   * The cached value of the '{@link #getReference() <em>Reference</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected Referenceable reference;

  /**
   * The cached value of the '{@link #getSubjectTypeMappings() <em>Subject Type Mappings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubjectTypeMappings()
   * @generated
   * @ordered
   */
  protected EList<SubjectTypeMapping> subjectTypeMappings;

  /**
   * The cached value of the '{@link #getPoMappings() <em>Po Mappings</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoMappings()
   * @generated
   * @ordered
   */
  protected EList<PredicateObjectMapping> poMappings;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RdfMappingPackage.Literals.MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdfMappingPackage.MAPPING__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalSource getSource()
  {
    if (source != null && source.eIsProxy())
    {
      InternalEObject oldSource = (InternalEObject)source;
      source = (LogicalSource)eResolveProxy(oldSource);
      if (source != oldSource)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RdfMappingPackage.MAPPING__SOURCE, oldSource, source));
      }
    }
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalSource basicGetSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSource(LogicalSource newSource)
  {
    LogicalSource oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdfMappingPackage.MAPPING__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPattern()
  {
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPattern(String newPattern)
  {
    String oldPattern = pattern;
    pattern = newPattern;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdfMappingPackage.MAPPING__PATTERN, oldPattern, pattern));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Referenceable getReference()
  {
    if (reference != null && reference.eIsProxy())
    {
      InternalEObject oldReference = (InternalEObject)reference;
      reference = (Referenceable)eResolveProxy(oldReference);
      if (reference != oldReference)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RdfMappingPackage.MAPPING__REFERENCE, oldReference, reference));
      }
    }
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Referenceable basicGetReference()
  {
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReference(Referenceable newReference)
  {
    Referenceable oldReference = reference;
    reference = newReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdfMappingPackage.MAPPING__REFERENCE, oldReference, reference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SubjectTypeMapping> getSubjectTypeMappings()
  {
    if (subjectTypeMappings == null)
    {
      subjectTypeMappings = new EObjectContainmentEList<SubjectTypeMapping>(SubjectTypeMapping.class, this, RdfMappingPackage.MAPPING__SUBJECT_TYPE_MAPPINGS);
    }
    return subjectTypeMappings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PredicateObjectMapping> getPoMappings()
  {
    if (poMappings == null)
    {
      poMappings = new EObjectContainmentEList<PredicateObjectMapping>(PredicateObjectMapping.class, this, RdfMappingPackage.MAPPING__PO_MAPPINGS);
    }
    return poMappings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RdfMappingPackage.MAPPING__SUBJECT_TYPE_MAPPINGS:
        return ((InternalEList<?>)getSubjectTypeMappings()).basicRemove(otherEnd, msgs);
      case RdfMappingPackage.MAPPING__PO_MAPPINGS:
        return ((InternalEList<?>)getPoMappings()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RdfMappingPackage.MAPPING__NAME:
        return getName();
      case RdfMappingPackage.MAPPING__SOURCE:
        if (resolve) return getSource();
        return basicGetSource();
      case RdfMappingPackage.MAPPING__PATTERN:
        return getPattern();
      case RdfMappingPackage.MAPPING__REFERENCE:
        if (resolve) return getReference();
        return basicGetReference();
      case RdfMappingPackage.MAPPING__SUBJECT_TYPE_MAPPINGS:
        return getSubjectTypeMappings();
      case RdfMappingPackage.MAPPING__PO_MAPPINGS:
        return getPoMappings();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RdfMappingPackage.MAPPING__NAME:
        setName((String)newValue);
        return;
      case RdfMappingPackage.MAPPING__SOURCE:
        setSource((LogicalSource)newValue);
        return;
      case RdfMappingPackage.MAPPING__PATTERN:
        setPattern((String)newValue);
        return;
      case RdfMappingPackage.MAPPING__REFERENCE:
        setReference((Referenceable)newValue);
        return;
      case RdfMappingPackage.MAPPING__SUBJECT_TYPE_MAPPINGS:
        getSubjectTypeMappings().clear();
        getSubjectTypeMappings().addAll((Collection<? extends SubjectTypeMapping>)newValue);
        return;
      case RdfMappingPackage.MAPPING__PO_MAPPINGS:
        getPoMappings().clear();
        getPoMappings().addAll((Collection<? extends PredicateObjectMapping>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RdfMappingPackage.MAPPING__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RdfMappingPackage.MAPPING__SOURCE:
        setSource((LogicalSource)null);
        return;
      case RdfMappingPackage.MAPPING__PATTERN:
        setPattern(PATTERN_EDEFAULT);
        return;
      case RdfMappingPackage.MAPPING__REFERENCE:
        setReference((Referenceable)null);
        return;
      case RdfMappingPackage.MAPPING__SUBJECT_TYPE_MAPPINGS:
        getSubjectTypeMappings().clear();
        return;
      case RdfMappingPackage.MAPPING__PO_MAPPINGS:
        getPoMappings().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RdfMappingPackage.MAPPING__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RdfMappingPackage.MAPPING__SOURCE:
        return source != null;
      case RdfMappingPackage.MAPPING__PATTERN:
        return PATTERN_EDEFAULT == null ? pattern != null : !PATTERN_EDEFAULT.equals(pattern);
      case RdfMappingPackage.MAPPING__REFERENCE:
        return reference != null;
      case RdfMappingPackage.MAPPING__SUBJECT_TYPE_MAPPINGS:
        return subjectTypeMappings != null && !subjectTypeMappings.isEmpty();
      case RdfMappingPackage.MAPPING__PO_MAPPINGS:
        return poMappings != null && !poMappings.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", pattern: ");
    result.append(pattern);
    result.append(')');
    return result.toString();
  }

} //MappingImpl
