/**
 * generated by Xtext 2.14.0
 */
package com.zazuko.experimental.rmdsl.rdfMapping.impl;

import com.zazuko.experimental.rmdsl.rdfMapping.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class RdfMappingFactoryImpl extends EFactoryImpl implements RdfMappingFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static RdfMappingFactory init()
  {
    try
    {
      RdfMappingFactory theRdfMappingFactory = (RdfMappingFactory)EPackage.Registry.INSTANCE.getEFactory(RdfMappingPackage.eNS_URI);
      if (theRdfMappingFactory != null)
      {
        return theRdfMappingFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new RdfMappingFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RdfMappingFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case RdfMappingPackage.DOMAINMODEL: return createDomainmodel();
      case RdfMappingPackage.ELEMENT: return createElement();
      case RdfMappingPackage.SOURCE_TYPES_DEFINITION: return createSourceTypesDefinition();
      case RdfMappingPackage.SOURCE_TYPE: return createSourceType();
      case RdfMappingPackage.DATATYPES_DEFINITION: return createDatatypesDefinition();
      case RdfMappingPackage.DATATYPE: return createDatatype();
      case RdfMappingPackage.LANGUAGE_TAG_DEFINITION: return createLanguageTagDefinition();
      case RdfMappingPackage.LANGUAGE_TAG: return createLanguageTag();
      case RdfMappingPackage.SOURCE_GROUP: return createSourceGroup();
      case RdfMappingPackage.LOGICAL_SOURCE: return createLogicalSource();
      case RdfMappingPackage.REFERENCEABLE: return createReferenceable();
      case RdfMappingPackage.VOCABULARY: return createVocabulary();
      case RdfMappingPackage.PREFIX: return createPrefix();
      case RdfMappingPackage.RDF_PROPERTY: return createRdfProperty();
      case RdfMappingPackage.RDF_CLASS: return createRdfClass();
      case RdfMappingPackage.MAPPING: return createMapping();
      case RdfMappingPackage.SUBJECT_TYPE_MAPPING: return createSubjectTypeMapping();
      case RdfMappingPackage.PREDICATE_OBJECT_MAPPING: return createPredicateObjectMapping();
      case RdfMappingPackage.VALUED_TERM: return createValuedTerm();
      case RdfMappingPackage.REFERENCE_VALUED_TERM: return createReferenceValuedTerm();
      case RdfMappingPackage.TEMPLATE_VALUED_TERM: return createTemplateValuedTerm();
      case RdfMappingPackage.LINKED_RESOURCE_TERM: return createLinkedResourceTerm();
      case RdfMappingPackage.IMPORT: return createImport();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domainmodel createDomainmodel()
  {
    DomainmodelImpl domainmodel = new DomainmodelImpl();
    return domainmodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SourceTypesDefinition createSourceTypesDefinition()
  {
    SourceTypesDefinitionImpl sourceTypesDefinition = new SourceTypesDefinitionImpl();
    return sourceTypesDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SourceType createSourceType()
  {
    SourceTypeImpl sourceType = new SourceTypeImpl();
    return sourceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatatypesDefinition createDatatypesDefinition()
  {
    DatatypesDefinitionImpl datatypesDefinition = new DatatypesDefinitionImpl();
    return datatypesDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Datatype createDatatype()
  {
    DatatypeImpl datatype = new DatatypeImpl();
    return datatype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LanguageTagDefinition createLanguageTagDefinition()
  {
    LanguageTagDefinitionImpl languageTagDefinition = new LanguageTagDefinitionImpl();
    return languageTagDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LanguageTag createLanguageTag()
  {
    LanguageTagImpl languageTag = new LanguageTagImpl();
    return languageTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SourceGroup createSourceGroup()
  {
    SourceGroupImpl sourceGroup = new SourceGroupImpl();
    return sourceGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalSource createLogicalSource()
  {
    LogicalSourceImpl logicalSource = new LogicalSourceImpl();
    return logicalSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Referenceable createReferenceable()
  {
    ReferenceableImpl referenceable = new ReferenceableImpl();
    return referenceable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Vocabulary createVocabulary()
  {
    VocabularyImpl vocabulary = new VocabularyImpl();
    return vocabulary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Prefix createPrefix()
  {
    PrefixImpl prefix = new PrefixImpl();
    return prefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RdfProperty createRdfProperty()
  {
    RdfPropertyImpl rdfProperty = new RdfPropertyImpl();
    return rdfProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RdfClass createRdfClass()
  {
    RdfClassImpl rdfClass = new RdfClassImpl();
    return rdfClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubjectTypeMapping createSubjectTypeMapping()
  {
    SubjectTypeMappingImpl subjectTypeMapping = new SubjectTypeMappingImpl();
    return subjectTypeMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PredicateObjectMapping createPredicateObjectMapping()
  {
    PredicateObjectMappingImpl predicateObjectMapping = new PredicateObjectMappingImpl();
    return predicateObjectMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ValuedTerm createValuedTerm()
  {
    ValuedTermImpl valuedTerm = new ValuedTermImpl();
    return valuedTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReferenceValuedTerm createReferenceValuedTerm()
  {
    ReferenceValuedTermImpl referenceValuedTerm = new ReferenceValuedTermImpl();
    return referenceValuedTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TemplateValuedTerm createTemplateValuedTerm()
  {
    TemplateValuedTermImpl templateValuedTerm = new TemplateValuedTermImpl();
    return templateValuedTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinkedResourceTerm createLinkedResourceTerm()
  {
    LinkedResourceTermImpl linkedResourceTerm = new LinkedResourceTermImpl();
    return linkedResourceTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RdfMappingPackage getRdfMappingPackage()
  {
    return (RdfMappingPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static RdfMappingPackage getPackage()
  {
    return RdfMappingPackage.eINSTANCE;
  }

} //RdfMappingFactoryImpl
