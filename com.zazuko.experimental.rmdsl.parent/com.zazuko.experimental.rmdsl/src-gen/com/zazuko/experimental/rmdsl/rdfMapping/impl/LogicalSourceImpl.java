/**
 * generated by Xtext 2.14.0
 */
package com.zazuko.experimental.rmdsl.rdfMapping.impl;

import com.zazuko.experimental.rmdsl.rdfMapping.LogicalSource;
import com.zazuko.experimental.rmdsl.rdfMapping.RdfMappingPackage;
import com.zazuko.experimental.rmdsl.rdfMapping.Referenceable;
import com.zazuko.experimental.rmdsl.rdfMapping.SourceType;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Logical Source</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.LogicalSourceImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.LogicalSourceImpl#getType <em>Type</em>}</li>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.LogicalSourceImpl#getSource <em>Source</em>}</li>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.LogicalSourceImpl#getIterator <em>Iterator</em>}</li>
 *   <li>{@link com.zazuko.experimental.rmdsl.rdfMapping.impl.LogicalSourceImpl#getReferencables <em>Referencables</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LogicalSourceImpl extends ElementImpl implements LogicalSource
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected SourceType type;

  /**
   * The default value of the '{@link #getSource() <em>Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected static final String SOURCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected String source = SOURCE_EDEFAULT;

  /**
   * The default value of the '{@link #getIterator() <em>Iterator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterator()
   * @generated
   * @ordered
   */
  protected static final String ITERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIterator() <em>Iterator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterator()
   * @generated
   * @ordered
   */
  protected String iterator = ITERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getReferencables() <em>Referencables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferencables()
   * @generated
   * @ordered
   */
  protected EList<Referenceable> referencables;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LogicalSourceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RdfMappingPackage.Literals.LOGICAL_SOURCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdfMappingPackage.LOGICAL_SOURCE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SourceType getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (SourceType)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, RdfMappingPackage.LOGICAL_SOURCE__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SourceType basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(SourceType newType)
  {
    SourceType oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdfMappingPackage.LOGICAL_SOURCE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSource(String newSource)
  {
    String oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdfMappingPackage.LOGICAL_SOURCE__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getIterator()
  {
    return iterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIterator(String newIterator)
  {
    String oldIterator = iterator;
    iterator = newIterator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, RdfMappingPackage.LOGICAL_SOURCE__ITERATOR, oldIterator, iterator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Referenceable> getReferencables()
  {
    if (referencables == null)
    {
      referencables = new EObjectContainmentEList<Referenceable>(Referenceable.class, this, RdfMappingPackage.LOGICAL_SOURCE__REFERENCABLES);
    }
    return referencables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RdfMappingPackage.LOGICAL_SOURCE__REFERENCABLES:
        return ((InternalEList<?>)getReferencables()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RdfMappingPackage.LOGICAL_SOURCE__NAME:
        return getName();
      case RdfMappingPackage.LOGICAL_SOURCE__TYPE:
        if (resolve) return getType();
        return basicGetType();
      case RdfMappingPackage.LOGICAL_SOURCE__SOURCE:
        return getSource();
      case RdfMappingPackage.LOGICAL_SOURCE__ITERATOR:
        return getIterator();
      case RdfMappingPackage.LOGICAL_SOURCE__REFERENCABLES:
        return getReferencables();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RdfMappingPackage.LOGICAL_SOURCE__NAME:
        setName((String)newValue);
        return;
      case RdfMappingPackage.LOGICAL_SOURCE__TYPE:
        setType((SourceType)newValue);
        return;
      case RdfMappingPackage.LOGICAL_SOURCE__SOURCE:
        setSource((String)newValue);
        return;
      case RdfMappingPackage.LOGICAL_SOURCE__ITERATOR:
        setIterator((String)newValue);
        return;
      case RdfMappingPackage.LOGICAL_SOURCE__REFERENCABLES:
        getReferencables().clear();
        getReferencables().addAll((Collection<? extends Referenceable>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RdfMappingPackage.LOGICAL_SOURCE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case RdfMappingPackage.LOGICAL_SOURCE__TYPE:
        setType((SourceType)null);
        return;
      case RdfMappingPackage.LOGICAL_SOURCE__SOURCE:
        setSource(SOURCE_EDEFAULT);
        return;
      case RdfMappingPackage.LOGICAL_SOURCE__ITERATOR:
        setIterator(ITERATOR_EDEFAULT);
        return;
      case RdfMappingPackage.LOGICAL_SOURCE__REFERENCABLES:
        getReferencables().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RdfMappingPackage.LOGICAL_SOURCE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case RdfMappingPackage.LOGICAL_SOURCE__TYPE:
        return type != null;
      case RdfMappingPackage.LOGICAL_SOURCE__SOURCE:
        return SOURCE_EDEFAULT == null ? source != null : !SOURCE_EDEFAULT.equals(source);
      case RdfMappingPackage.LOGICAL_SOURCE__ITERATOR:
        return ITERATOR_EDEFAULT == null ? iterator != null : !ITERATOR_EDEFAULT.equals(iterator);
      case RdfMappingPackage.LOGICAL_SOURCE__REFERENCABLES:
        return referencables != null && !referencables.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", source: ");
    result.append(source);
    result.append(", iterator: ");
    result.append(iterator);
    result.append(')');
    return result.toString();
  }

} //LogicalSourceImpl
