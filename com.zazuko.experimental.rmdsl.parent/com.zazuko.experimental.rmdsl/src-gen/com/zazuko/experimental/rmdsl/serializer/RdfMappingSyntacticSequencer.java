/*
 * generated by Xtext 2.14.0
 */
package com.zazuko.experimental.rmdsl.serializer;

import com.google.inject.Inject;
import com.zazuko.experimental.rmdsl.services.RdfMappingGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class RdfMappingSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RdfMappingGrammarAccess grammarAccess;
	protected AbstractElementAlias match_LinkedResourceTerm_SemicolonKeyword_4_q;
	protected AbstractElementAlias match_Mapping_SemicolonKeyword_5_2_q;
	protected AbstractElementAlias match_Mapping_SemicolonKeyword_8_2_q;
	protected AbstractElementAlias match_ReferenceValuedTerm_SemicolonKeyword_3_q;
	protected AbstractElementAlias match_TemplateValuedTerm_SemicolonKeyword_4_q;
	protected AbstractElementAlias match_Vocabulary_ClassesKeyword_4_0_q;
	protected AbstractElementAlias match_Vocabulary_PropertiesKeyword_5_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RdfMappingGrammarAccess) access;
		match_LinkedResourceTerm_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getLinkedResourceTermAccess().getSemicolonKeyword_4());
		match_Mapping_SemicolonKeyword_5_2_q = new TokenAlias(false, true, grammarAccess.getMappingAccess().getSemicolonKeyword_5_2());
		match_Mapping_SemicolonKeyword_8_2_q = new TokenAlias(false, true, grammarAccess.getMappingAccess().getSemicolonKeyword_8_2());
		match_ReferenceValuedTerm_SemicolonKeyword_3_q = new TokenAlias(false, true, grammarAccess.getReferenceValuedTermAccess().getSemicolonKeyword_3());
		match_TemplateValuedTerm_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getTemplateValuedTermAccess().getSemicolonKeyword_4());
		match_Vocabulary_ClassesKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getVocabularyAccess().getClassesKeyword_4_0());
		match_Vocabulary_PropertiesKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getVocabularyAccess().getPropertiesKeyword_5_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_LinkedResourceTerm_SemicolonKeyword_4_q.equals(syntax))
				emit_LinkedResourceTerm_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Mapping_SemicolonKeyword_5_2_q.equals(syntax))
				emit_Mapping_SemicolonKeyword_5_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Mapping_SemicolonKeyword_8_2_q.equals(syntax))
				emit_Mapping_SemicolonKeyword_8_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReferenceValuedTerm_SemicolonKeyword_3_q.equals(syntax))
				emit_ReferenceValuedTerm_SemicolonKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TemplateValuedTerm_SemicolonKeyword_4_q.equals(syntax))
				emit_TemplateValuedTerm_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Vocabulary_ClassesKeyword_4_0_q.equals(syntax))
				emit_Vocabulary_ClassesKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Vocabulary_PropertiesKeyword_5_0_q.equals(syntax))
				emit_Vocabulary_PropertiesKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     references+=[Referenceable|ID] (ambiguity) (rule end)
	 */
	protected void emit_LinkedResourceTerm_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     targetVocabularies+=[Vocabulary|QualifiedName] (ambiguity) 'subject' subjectIriMapping=TemplateValuedTerm
	 */
	protected void emit_Mapping_SemicolonKeyword_5_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     subjectTypeMappings+=SubjectTypeMapping (ambiguity) 'properties' poMappings+=PredicateObjectMapping
	 *     subjectTypeMappings+=SubjectTypeMapping (ambiguity) '}' (rule end)
	 */
	protected void emit_Mapping_SemicolonKeyword_8_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     datatype=[Datatype|ID] (ambiguity) (rule end)
	 *     languageTag=[LanguageTag|ID] (ambiguity) (rule end)
	 *     reference=[Referenceable|ID] (ambiguity) (rule end)
	 */
	protected void emit_ReferenceValuedTerm_SemicolonKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     references+=[Referenceable|ID] (ambiguity) (rule end)
	 */
	protected void emit_TemplateValuedTerm_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'classes'?
	 *
	 * This ambiguous syntax occurs at:
	 *     prefix=Prefix (ambiguity) 'properties' properties+=RdfProperty
	 *     prefix=Prefix (ambiguity) 'properties'? '}' (rule end)
	 */
	protected void emit_Vocabulary_ClassesKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'properties'?
	 *
	 * This ambiguous syntax occurs at:
	 *     classes+=RdfClass (ambiguity) '}' (rule end)
	 *     prefix=Prefix 'classes'? (ambiguity) '}' (rule end)
	 */
	protected void emit_Vocabulary_PropertiesKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
