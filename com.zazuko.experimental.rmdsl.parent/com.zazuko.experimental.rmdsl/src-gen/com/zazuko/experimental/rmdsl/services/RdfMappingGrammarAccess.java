/*
 * generated by Xtext 2.14.0
 */
package com.zazuko.experimental.rmdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RdfMappingGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=Element*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSourceGroupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalSourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrefixHolderParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMappingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImportParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSourceTypesDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLanguageTagDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Element:
		//	SourceGroup | LogicalSource | PrefixHolder | Mapping | Import | SourceTypesDefinition | LanguageTagDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//SourceGroup | LogicalSource | PrefixHolder | Mapping | Import | SourceTypesDefinition | LanguageTagDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SourceGroup
		public RuleCall getSourceGroupParserRuleCall_0() { return cSourceGroupParserRuleCall_0; }
		
		//LogicalSource
		public RuleCall getLogicalSourceParserRuleCall_1() { return cLogicalSourceParserRuleCall_1; }
		
		//PrefixHolder
		public RuleCall getPrefixHolderParserRuleCall_2() { return cPrefixHolderParserRuleCall_2; }
		
		//Mapping
		public RuleCall getMappingParserRuleCall_3() { return cMappingParserRuleCall_3; }
		
		//Import
		public RuleCall getImportParserRuleCall_4() { return cImportParserRuleCall_4; }
		
		//SourceTypesDefinition
		public RuleCall getSourceTypesDefinitionParserRuleCall_5() { return cSourceTypesDefinitionParserRuleCall_5; }
		
		//LanguageTagDefinition
		public RuleCall getLanguageTagDefinitionParserRuleCall_6() { return cLanguageTagDefinitionParserRuleCall_6; }
	}
	public class SourceTypesDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.SourceTypesDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceTypesDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSourceTypesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypesSourceTypeParserRuleCall_3_0 = (RuleCall)cTypesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SourceTypesDefinition:
		//	{SourceTypesDefinition}
		//	'source-types' '{'
		//	types+=SourceType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SourceTypesDefinition} 'source-types' '{' types+=SourceType* '}'
		public Group getGroup() { return cGroup; }
		
		//{SourceTypesDefinition}
		public Action getSourceTypesDefinitionAction_0() { return cSourceTypesDefinitionAction_0; }
		
		//'source-types'
		public Keyword getSourceTypesKeyword_1() { return cSourceTypesKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//types+=SourceType*
		public Assignment getTypesAssignment_3() { return cTypesAssignment_3; }
		
		//SourceType
		public RuleCall getTypesSourceTypeParserRuleCall_3_0() { return cTypesSourceTypeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SourceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.SourceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cReferenceFormulationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceFormulationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReferenceFormulationSTRINGTerminalRuleCall_2_0 = (RuleCall)cReferenceFormulationAssignment_2.eContents().get(0);
		
		//SourceType:
		//	name=ID 'referenceFormulation' referenceFormulation=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'referenceFormulation' referenceFormulation=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'referenceFormulation'
		public Keyword getReferenceFormulationKeyword_1() { return cReferenceFormulationKeyword_1; }
		
		//referenceFormulation=STRING
		public Assignment getReferenceFormulationAssignment_2() { return cReferenceFormulationAssignment_2; }
		
		//STRING
		public RuleCall getReferenceFormulationSTRINGTerminalRuleCall_2_0() { return cReferenceFormulationSTRINGTerminalRuleCall_2_0; }
	}
	public class DatatypesDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.DatatypesDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDatatypesDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDatatypesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPrefixAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrefixPrefixParserRuleCall_3_0 = (RuleCall)cPrefixAssignment_3.eContents().get(0);
		private final Assignment cTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypesDatatypeParserRuleCall_4_0 = (RuleCall)cTypesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DatatypesDefinition:
		//	{DatatypesDefinition}
		//	'datatypes' '{'
		//	prefix=Prefix
		//	types+=Datatype*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DatatypesDefinition} 'datatypes' '{' prefix=Prefix types+=Datatype* '}'
		public Group getGroup() { return cGroup; }
		
		//{DatatypesDefinition}
		public Action getDatatypesDefinitionAction_0() { return cDatatypesDefinitionAction_0; }
		
		//'datatypes'
		public Keyword getDatatypesKeyword_1() { return cDatatypesKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//prefix=Prefix
		public Assignment getPrefixAssignment_3() { return cPrefixAssignment_3; }
		
		//Prefix
		public RuleCall getPrefixPrefixParserRuleCall_3_0() { return cPrefixPrefixParserRuleCall_3_0; }
		
		//types+=Datatype*
		public Assignment getTypesAssignment_4() { return cTypesAssignment_4; }
		
		//Datatype
		public RuleCall getTypesDatatypeParserRuleCall_4_0() { return cTypesDatatypeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DatatypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.Datatype");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Datatype:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LanguageTagDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.LanguageTagDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLanguageTagDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLanguageTagsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLanguageTagsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLanguageTagsLanguageTagParserRuleCall_3_0 = (RuleCall)cLanguageTagsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LanguageTagDefinition:
		//	{LanguageTagDefinition}
		//	'language-tags' '{'
		//	languageTags+=LanguageTag*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{LanguageTagDefinition} 'language-tags' '{' languageTags+=LanguageTag* '}'
		public Group getGroup() { return cGroup; }
		
		//{LanguageTagDefinition}
		public Action getLanguageTagDefinitionAction_0() { return cLanguageTagDefinitionAction_0; }
		
		//'language-tags'
		public Keyword getLanguageTagsKeyword_1() { return cLanguageTagsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//languageTags+=LanguageTag*
		public Assignment getLanguageTagsAssignment_3() { return cLanguageTagsAssignment_3; }
		
		//LanguageTag
		public RuleCall getLanguageTagsLanguageTagParserRuleCall_3_0() { return cLanguageTagsLanguageTagParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LanguageTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.LanguageTag");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//LanguageTag:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SourceGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.SourceGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSourceGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeSourceTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeSourceTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeSourceTypeCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSourceKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSourceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSourceSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cSourceAssignment_5_1.eContents().get(0);
		private final Assignment cLogicalSourcesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLogicalSourcesLogicalSourceParserRuleCall_6_0 = (RuleCall)cLogicalSourcesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SourceGroup:
		//	'source-group' name=ID '{'
		//	'type' type=[SourceType] ('source' source=STRING)?
		//	logicalSources+=LogicalSource*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'source-group' name=ID '{' 'type' type=[SourceType] ('source' source=STRING)? logicalSources+=LogicalSource* '}'
		public Group getGroup() { return cGroup; }
		
		//'source-group'
		public Keyword getSourceGroupKeyword_0() { return cSourceGroupKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[SourceType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[SourceType]
		public CrossReference getTypeSourceTypeCrossReference_4_0() { return cTypeSourceTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeSourceTypeIDTerminalRuleCall_4_0_1() { return cTypeSourceTypeIDTerminalRuleCall_4_0_1; }
		
		//('source' source=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'source'
		public Keyword getSourceKeyword_5_0() { return cSourceKeyword_5_0; }
		
		//source=STRING
		public Assignment getSourceAssignment_5_1() { return cSourceAssignment_5_1; }
		
		//STRING
		public RuleCall getSourceSTRINGTerminalRuleCall_5_1_0() { return cSourceSTRINGTerminalRuleCall_5_1_0; }
		
		//logicalSources+=LogicalSource*
		public Assignment getLogicalSourcesAssignment_6() { return cLogicalSourcesAssignment_6; }
		
		//LogicalSource
		public RuleCall getLogicalSourcesLogicalSourceParserRuleCall_6_0() { return cLogicalSourcesLogicalSourceParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class LogicalSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.LogicalSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLogicalSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTypeSourceTypeCrossReference_3_1_0 = (CrossReference)cTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cTypeSourceTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTypeSourceTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSourceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSourceAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSourceSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cSourceAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIteratorKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIteratorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIteratorSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cIteratorAssignment_5_1.eContents().get(0);
		private final Keyword cReferenceablesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cReferencablesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cReferencablesReferenceableParserRuleCall_8_0 = (RuleCall)cReferencablesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//LogicalSource:
		//	'logical-source' name=ID '{' ('type' type=[SourceType])? ('source' source=STRING)? ('iterator' iterator=STRING)?
		//	'referenceables' '{'
		//	referencables+=Referenceable*
		//	'}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'logical-source' name=ID '{' ('type' type=[SourceType])? ('source' source=STRING)? ('iterator' iterator=STRING)?
		//'referenceables' '{' referencables+=Referenceable* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'logical-source'
		public Keyword getLogicalSourceKeyword_0() { return cLogicalSourceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('type' type=[SourceType])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }
		
		//type=[SourceType]
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//[SourceType]
		public CrossReference getTypeSourceTypeCrossReference_3_1_0() { return cTypeSourceTypeCrossReference_3_1_0; }
		
		//ID
		public RuleCall getTypeSourceTypeIDTerminalRuleCall_3_1_0_1() { return cTypeSourceTypeIDTerminalRuleCall_3_1_0_1; }
		
		//('source' source=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'source'
		public Keyword getSourceKeyword_4_0() { return cSourceKeyword_4_0; }
		
		//source=STRING
		public Assignment getSourceAssignment_4_1() { return cSourceAssignment_4_1; }
		
		//STRING
		public RuleCall getSourceSTRINGTerminalRuleCall_4_1_0() { return cSourceSTRINGTerminalRuleCall_4_1_0; }
		
		//('iterator' iterator=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'iterator'
		public Keyword getIteratorKeyword_5_0() { return cIteratorKeyword_5_0; }
		
		//iterator=STRING
		public Assignment getIteratorAssignment_5_1() { return cIteratorAssignment_5_1; }
		
		//STRING
		public RuleCall getIteratorSTRINGTerminalRuleCall_5_1_0() { return cIteratorSTRINGTerminalRuleCall_5_1_0; }
		
		//'referenceables'
		public Keyword getReferenceablesKeyword_6() { return cReferenceablesKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//referencables+=Referenceable*
		public Assignment getReferencablesAssignment_8() { return cReferencablesAssignment_8; }
		
		//Referenceable
		public RuleCall getReferencablesReferenceableParserRuleCall_8_0() { return cReferencablesReferenceableParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ReferenceableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.Referenceable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Referenceable:
		//	name=ID value=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID value=STRING?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//value=STRING?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class VocabularyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.Vocabulary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVocabularyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPrefixAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrefixPrefixParserRuleCall_3_0 = (RuleCall)cPrefixAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cClassesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cClassesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cClassesRdfClassParserRuleCall_4_1_0 = (RuleCall)cClassesAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPropertiesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPropertiesRdfPropertyParserRuleCall_5_1_0 = (RuleCall)cPropertiesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Vocabulary:
		//	'vocabulary' name=ID '{'
		//	prefix=Prefix ('classes' classes+=RdfClass*)? ('properties' properties+=RdfProperty*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'vocabulary' name=ID '{' prefix=Prefix ('classes' classes+=RdfClass*)? ('properties' properties+=RdfProperty*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'vocabulary'
		public Keyword getVocabularyKeyword_0() { return cVocabularyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//prefix=Prefix
		public Assignment getPrefixAssignment_3() { return cPrefixAssignment_3; }
		
		//Prefix
		public RuleCall getPrefixPrefixParserRuleCall_3_0() { return cPrefixPrefixParserRuleCall_3_0; }
		
		//('classes' classes+=RdfClass*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'classes'
		public Keyword getClassesKeyword_4_0() { return cClassesKeyword_4_0; }
		
		//classes+=RdfClass*
		public Assignment getClassesAssignment_4_1() { return cClassesAssignment_4_1; }
		
		//RdfClass
		public RuleCall getClassesRdfClassParserRuleCall_4_1_0() { return cClassesRdfClassParserRuleCall_4_1_0; }
		
		//('properties' properties+=RdfProperty*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'properties'
		public Keyword getPropertiesKeyword_5_0() { return cPropertiesKeyword_5_0; }
		
		//properties+=RdfProperty*
		public Assignment getPropertiesAssignment_5_1() { return cPropertiesAssignment_5_1; }
		
		//RdfProperty
		public RuleCall getPropertiesRdfPropertyParserRuleCall_5_1_0() { return cPropertiesRdfPropertyParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PrefixHolderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.PrefixHolder");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDatatypesDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVocabularyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrefixHolder:
		//	DatatypesDefinition | Vocabulary;
		@Override public ParserRule getRule() { return rule; }
		
		//DatatypesDefinition | Vocabulary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DatatypesDefinition
		public RuleCall getDatatypesDefinitionParserRuleCall_0() { return cDatatypesDefinitionParserRuleCall_0; }
		
		//Vocabulary
		public RuleCall getVocabularyParserRuleCall_1() { return cVocabularyParserRuleCall_1; }
	}
	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.Prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		//Prefix:
		//	'prefix' label=STRING iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'prefix' label=STRING iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'prefix'
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_0() { return cLabelSTRINGTerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	public class RdfPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.RdfProperty");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//RdfProperty:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class RdfClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.RdfClass");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//RdfClass:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceLogicalSourceCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceLogicalSourceQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cSourceLogicalSourceCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUseVocabulariesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTargetVocabulariesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cTargetVocabulariesVocabularyCrossReference_5_1_0 = (CrossReference)cTargetVocabulariesAssignment_5_1.eContents().get(0);
		private final RuleCall cTargetVocabulariesVocabularyQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cTargetVocabulariesVocabularyCrossReference_5_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cSubjectKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSubjectIriMappingAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSubjectIriMappingTemplateValuedTermParserRuleCall_7_0 = (RuleCall)cSubjectIriMappingAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cTypesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cSubjectTypeMappingsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cSubjectTypeMappingsSubjectTypeMappingParserRuleCall_8_1_0 = (RuleCall)cSubjectTypeMappingsAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cPropertiesKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cPoMappingsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cPoMappingsPredicateObjectMappingParserRuleCall_9_1_0 = (RuleCall)cPoMappingsAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Mapping:
		//	'map' name=ID 'from' source=[LogicalSource|QualifiedName] '{' ('use-vocabularies'
		//	targetVocabularies+=[Vocabulary|QualifiedName]+ ';'?)?
		//	'subject' subjectIriMapping=TemplateValuedTerm ('types' subjectTypeMappings+=SubjectTypeMapping+ ';'?)? ('properties'
		//	poMappings+=PredicateObjectMapping+)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'map' name=ID 'from' source=[LogicalSource|QualifiedName] '{' ('use-vocabularies'
		//targetVocabularies+=[Vocabulary|QualifiedName]+ ';'?)? 'subject' subjectIriMapping=TemplateValuedTerm ('types'
		//subjectTypeMappings+=SubjectTypeMapping+ ';'?)? ('properties' poMappings+=PredicateObjectMapping+)? '}'
		public Group getGroup() { return cGroup; }
		
		//'map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//source=[LogicalSource|QualifiedName]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[LogicalSource|QualifiedName]
		public CrossReference getSourceLogicalSourceCrossReference_3_0() { return cSourceLogicalSourceCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getSourceLogicalSourceQualifiedNameParserRuleCall_3_0_1() { return cSourceLogicalSourceQualifiedNameParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('use-vocabularies' targetVocabularies+=[Vocabulary|QualifiedName]+ ';'?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'use-vocabularies'
		public Keyword getUseVocabulariesKeyword_5_0() { return cUseVocabulariesKeyword_5_0; }
		
		//targetVocabularies+=[Vocabulary|QualifiedName]+
		public Assignment getTargetVocabulariesAssignment_5_1() { return cTargetVocabulariesAssignment_5_1; }
		
		//[Vocabulary|QualifiedName]
		public CrossReference getTargetVocabulariesVocabularyCrossReference_5_1_0() { return cTargetVocabulariesVocabularyCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall getTargetVocabulariesVocabularyQualifiedNameParserRuleCall_5_1_0_1() { return cTargetVocabulariesVocabularyQualifiedNameParserRuleCall_5_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }
		
		//'subject'
		public Keyword getSubjectKeyword_6() { return cSubjectKeyword_6; }
		
		//subjectIriMapping=TemplateValuedTerm
		public Assignment getSubjectIriMappingAssignment_7() { return cSubjectIriMappingAssignment_7; }
		
		//TemplateValuedTerm
		public RuleCall getSubjectIriMappingTemplateValuedTermParserRuleCall_7_0() { return cSubjectIriMappingTemplateValuedTermParserRuleCall_7_0; }
		
		//('types' subjectTypeMappings+=SubjectTypeMapping+ ';'?)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'types'
		public Keyword getTypesKeyword_8_0() { return cTypesKeyword_8_0; }
		
		//subjectTypeMappings+=SubjectTypeMapping+
		public Assignment getSubjectTypeMappingsAssignment_8_1() { return cSubjectTypeMappingsAssignment_8_1; }
		
		//SubjectTypeMapping
		public RuleCall getSubjectTypeMappingsSubjectTypeMappingParserRuleCall_8_1_0() { return cSubjectTypeMappingsSubjectTypeMappingParserRuleCall_8_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_8_2() { return cSemicolonKeyword_8_2; }
		
		//('properties' poMappings+=PredicateObjectMapping+)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'properties'
		public Keyword getPropertiesKeyword_9_0() { return cPropertiesKeyword_9_0; }
		
		//poMappings+=PredicateObjectMapping+
		public Assignment getPoMappingsAssignment_9_1() { return cPoMappingsAssignment_9_1; }
		
		//PredicateObjectMapping
		public RuleCall getPoMappingsPredicateObjectMappingParserRuleCall_9_1_0() { return cPoMappingsPredicateObjectMappingParserRuleCall_9_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class SubjectTypeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.SubjectTypeMapping");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeRdfClassCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeRdfClassQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeRdfClassCrossReference_0.eContents().get(1);
		
		//SubjectTypeMapping:
		//	type=[RdfClass|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[RdfClass|QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[RdfClass|QualifiedName]
		public CrossReference getTypeRdfClassCrossReference_0() { return cTypeRdfClassCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeRdfClassQualifiedNameParserRuleCall_0_1() { return cTypeRdfClassQualifiedNameParserRuleCall_0_1; }
	}
	public class PredicateObjectMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.PredicateObjectMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyRdfPropertyCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyRdfPropertyQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cPropertyRdfPropertyCrossReference_0_0.eContents().get(1);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermValuedTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		
		//PredicateObjectMapping:
		//	property=[RdfProperty|QualifiedName] term=ValuedTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//property=[RdfProperty|QualifiedName] term=ValuedTerm
		public Group getGroup() { return cGroup; }
		
		//property=[RdfProperty|QualifiedName]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }
		
		//[RdfProperty|QualifiedName]
		public CrossReference getPropertyRdfPropertyCrossReference_0_0() { return cPropertyRdfPropertyCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getPropertyRdfPropertyQualifiedNameParserRuleCall_0_0_1() { return cPropertyRdfPropertyQualifiedNameParserRuleCall_0_0_1; }
		
		//term=ValuedTerm
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }
		
		//ValuedTerm
		public RuleCall getTermValuedTermParserRuleCall_1_0() { return cTermValuedTermParserRuleCall_1_0; }
	}
	public class ValuedTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.ValuedTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceValuedTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemplateValuedTermParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinkedResourceTermParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValuedTerm:
		//	ReferenceValuedTerm | TemplateValuedTerm | LinkedResourceTerm;
		@Override public ParserRule getRule() { return rule; }
		
		//ReferenceValuedTerm | TemplateValuedTerm | LinkedResourceTerm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReferenceValuedTerm
		public RuleCall getReferenceValuedTermParserRuleCall_0() { return cReferenceValuedTermParserRuleCall_0; }
		
		//TemplateValuedTerm
		public RuleCall getTemplateValuedTermParserRuleCall_1() { return cTemplateValuedTermParserRuleCall_1; }
		
		//LinkedResourceTerm
		public RuleCall getLinkedResourceTermParserRuleCall_2() { return cLinkedResourceTermParserRuleCall_2; }
	}
	public class ReferenceValuedTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.ReferenceValuedTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferenceReferenceableCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceReferenceableIDTerminalRuleCall_1_0_1 = (RuleCall)cReferenceReferenceableCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cWithKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cDatatypeKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cDatatypeAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final CrossReference cDatatypeDatatypeCrossReference_2_0_2_0 = (CrossReference)cDatatypeAssignment_2_0_2.eContents().get(0);
		private final RuleCall cDatatypeDatatypeIDTerminalRuleCall_2_0_2_0_1 = (RuleCall)cDatatypeDatatypeCrossReference_2_0_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cWithKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cLanguageTagKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cLanguageTagAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final CrossReference cLanguageTagLanguageTagCrossReference_2_1_2_0 = (CrossReference)cLanguageTagAssignment_2_1_2.eContents().get(0);
		private final RuleCall cLanguageTagLanguageTagIDTerminalRuleCall_2_1_2_0_1 = (RuleCall)cLanguageTagLanguageTagCrossReference_2_1_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// TODO: ConstantValuedTerm
		//ReferenceValuedTerm:
		//	'from' reference=[Referenceable] ('with' 'datatype' datatype=[Datatype] | 'with' 'language-tag'
		//	languageTag=[LanguageTag])?
		//	';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'from' reference=[Referenceable] ('with' 'datatype' datatype=[Datatype] | 'with' 'language-tag'
		//languageTag=[LanguageTag])? ';'?
		public Group getGroup() { return cGroup; }
		
		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//reference=[Referenceable]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//[Referenceable]
		public CrossReference getReferenceReferenceableCrossReference_1_0() { return cReferenceReferenceableCrossReference_1_0; }
		
		//ID
		public RuleCall getReferenceReferenceableIDTerminalRuleCall_1_0_1() { return cReferenceReferenceableIDTerminalRuleCall_1_0_1; }
		
		//('with' 'datatype' datatype=[Datatype] | 'with' 'language-tag' languageTag=[LanguageTag])?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'with' 'datatype' datatype=[Datatype]
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'with'
		public Keyword getWithKeyword_2_0_0() { return cWithKeyword_2_0_0; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_2_0_1() { return cDatatypeKeyword_2_0_1; }
		
		//datatype=[Datatype]
		public Assignment getDatatypeAssignment_2_0_2() { return cDatatypeAssignment_2_0_2; }
		
		//[Datatype]
		public CrossReference getDatatypeDatatypeCrossReference_2_0_2_0() { return cDatatypeDatatypeCrossReference_2_0_2_0; }
		
		//ID
		public RuleCall getDatatypeDatatypeIDTerminalRuleCall_2_0_2_0_1() { return cDatatypeDatatypeIDTerminalRuleCall_2_0_2_0_1; }
		
		//'with' 'language-tag' languageTag=[LanguageTag]
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'with'
		public Keyword getWithKeyword_2_1_0() { return cWithKeyword_2_1_0; }
		
		//'language-tag'
		public Keyword getLanguageTagKeyword_2_1_1() { return cLanguageTagKeyword_2_1_1; }
		
		//languageTag=[LanguageTag]
		public Assignment getLanguageTagAssignment_2_1_2() { return cLanguageTagAssignment_2_1_2; }
		
		//[LanguageTag]
		public CrossReference getLanguageTagLanguageTagCrossReference_2_1_2_0() { return cLanguageTagLanguageTagCrossReference_2_1_2_0; }
		
		//ID
		public RuleCall getLanguageTagLanguageTagIDTerminalRuleCall_2_1_2_0_1() { return cLanguageTagLanguageTagIDTerminalRuleCall_2_1_2_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class TemplateValuedTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.TemplateValuedTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTemplateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTemplateSTRINGTerminalRuleCall_1_0 = (RuleCall)cTemplateAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReferencesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferencesReferenceableCrossReference_3_0 = (CrossReference)cReferencesAssignment_3.eContents().get(0);
		private final RuleCall cReferencesReferenceableIDTerminalRuleCall_3_0_1 = (RuleCall)cReferencesReferenceableCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TemplateValuedTerm:
		//	'template' template=STRING 'with' references+=[Referenceable]+
		//	';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'template' template=STRING 'with' references+=[Referenceable]+ ';'?
		public Group getGroup() { return cGroup; }
		
		//'template'
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }
		
		//template=STRING
		public Assignment getTemplateAssignment_1() { return cTemplateAssignment_1; }
		
		//STRING
		public RuleCall getTemplateSTRINGTerminalRuleCall_1_0() { return cTemplateSTRINGTerminalRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//references+=[Referenceable]+
		public Assignment getReferencesAssignment_3() { return cReferencesAssignment_3; }
		
		//[Referenceable]
		public CrossReference getReferencesReferenceableCrossReference_3_0() { return cReferencesReferenceableCrossReference_3_0; }
		
		//ID
		public RuleCall getReferencesReferenceableIDTerminalRuleCall_3_0_1() { return cReferencesReferenceableIDTerminalRuleCall_3_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class LinkedResourceTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.LinkedResourceTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMappingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMappingMappingCrossReference_1_0 = (CrossReference)cMappingAssignment_1.eContents().get(0);
		private final RuleCall cMappingMappingIDTerminalRuleCall_1_0_1 = (RuleCall)cMappingMappingCrossReference_1_0.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReferencesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferencesReferenceableCrossReference_3_0 = (CrossReference)cReferencesAssignment_3.eContents().get(0);
		private final RuleCall cReferencesReferenceableIDTerminalRuleCall_3_0_1 = (RuleCall)cReferencesReferenceableCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LinkedResourceTerm:
		//	'link' mapping=[Mapping] 'with' references+=[Referenceable]+
		//	';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'link' mapping=[Mapping] 'with' references+=[Referenceable]+ ';'?
		public Group getGroup() { return cGroup; }
		
		//'link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//mapping=[Mapping]
		public Assignment getMappingAssignment_1() { return cMappingAssignment_1; }
		
		//[Mapping]
		public CrossReference getMappingMappingCrossReference_1_0() { return cMappingMappingCrossReference_1_0; }
		
		//ID
		public RuleCall getMappingMappingIDTerminalRuleCall_1_0_1() { return cMappingMappingIDTerminalRuleCall_1_0_1; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//references+=[Referenceable]+
		public Assignment getReferencesAssignment_3() { return cReferencesAssignment_3; }
		
		//[Referenceable]
		public CrossReference getReferencesReferenceableCrossReference_3_0() { return cReferencesReferenceableCrossReference_3_0; }
		
		//ID
		public RuleCall getReferencesReferenceableIDTerminalRuleCall_3_0_1() { return cReferencesReferenceableIDTerminalRuleCall_3_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.zazuko.experimental.rmdsl.RdfMapping.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final ElementElements pElement;
	private final SourceTypesDefinitionElements pSourceTypesDefinition;
	private final SourceTypeElements pSourceType;
	private final DatatypesDefinitionElements pDatatypesDefinition;
	private final DatatypeElements pDatatype;
	private final LanguageTagDefinitionElements pLanguageTagDefinition;
	private final LanguageTagElements pLanguageTag;
	private final SourceGroupElements pSourceGroup;
	private final LogicalSourceElements pLogicalSource;
	private final ReferenceableElements pReferenceable;
	private final VocabularyElements pVocabulary;
	private final PrefixHolderElements pPrefixHolder;
	private final PrefixElements pPrefix;
	private final RdfPropertyElements pRdfProperty;
	private final RdfClassElements pRdfClass;
	private final MappingElements pMapping;
	private final SubjectTypeMappingElements pSubjectTypeMapping;
	private final PredicateObjectMappingElements pPredicateObjectMapping;
	private final ValuedTermElements pValuedTerm;
	private final ReferenceValuedTermElements pReferenceValuedTerm;
	private final TemplateValuedTermElements pTemplateValuedTerm;
	private final LinkedResourceTermElements pLinkedResourceTerm;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RdfMappingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pElement = new ElementElements();
		this.pSourceTypesDefinition = new SourceTypesDefinitionElements();
		this.pSourceType = new SourceTypeElements();
		this.pDatatypesDefinition = new DatatypesDefinitionElements();
		this.pDatatype = new DatatypeElements();
		this.pLanguageTagDefinition = new LanguageTagDefinitionElements();
		this.pLanguageTag = new LanguageTagElements();
		this.pSourceGroup = new SourceGroupElements();
		this.pLogicalSource = new LogicalSourceElements();
		this.pReferenceable = new ReferenceableElements();
		this.pVocabulary = new VocabularyElements();
		this.pPrefixHolder = new PrefixHolderElements();
		this.pPrefix = new PrefixElements();
		this.pRdfProperty = new RdfPropertyElements();
		this.pRdfClass = new RdfClassElements();
		this.pMapping = new MappingElements();
		this.pSubjectTypeMapping = new SubjectTypeMappingElements();
		this.pPredicateObjectMapping = new PredicateObjectMappingElements();
		this.pValuedTerm = new ValuedTermElements();
		this.pReferenceValuedTerm = new ReferenceValuedTermElements();
		this.pTemplateValuedTerm = new TemplateValuedTermElements();
		this.pLinkedResourceTerm = new LinkedResourceTermElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.zazuko.experimental.rmdsl.RdfMapping".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=Element*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//Element:
	//	SourceGroup | LogicalSource | PrefixHolder | Mapping | Import | SourceTypesDefinition | LanguageTagDefinition;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//SourceTypesDefinition:
	//	{SourceTypesDefinition}
	//	'source-types' '{'
	//	types+=SourceType*
	//	'}';
	public SourceTypesDefinitionElements getSourceTypesDefinitionAccess() {
		return pSourceTypesDefinition;
	}
	
	public ParserRule getSourceTypesDefinitionRule() {
		return getSourceTypesDefinitionAccess().getRule();
	}
	
	//SourceType:
	//	name=ID 'referenceFormulation' referenceFormulation=STRING;
	public SourceTypeElements getSourceTypeAccess() {
		return pSourceType;
	}
	
	public ParserRule getSourceTypeRule() {
		return getSourceTypeAccess().getRule();
	}
	
	//DatatypesDefinition:
	//	{DatatypesDefinition}
	//	'datatypes' '{'
	//	prefix=Prefix
	//	types+=Datatype*
	//	'}';
	public DatatypesDefinitionElements getDatatypesDefinitionAccess() {
		return pDatatypesDefinition;
	}
	
	public ParserRule getDatatypesDefinitionRule() {
		return getDatatypesDefinitionAccess().getRule();
	}
	
	//Datatype:
	//	name=ID;
	public DatatypeElements getDatatypeAccess() {
		return pDatatype;
	}
	
	public ParserRule getDatatypeRule() {
		return getDatatypeAccess().getRule();
	}
	
	//LanguageTagDefinition:
	//	{LanguageTagDefinition}
	//	'language-tags' '{'
	//	languageTags+=LanguageTag*
	//	'}';
	public LanguageTagDefinitionElements getLanguageTagDefinitionAccess() {
		return pLanguageTagDefinition;
	}
	
	public ParserRule getLanguageTagDefinitionRule() {
		return getLanguageTagDefinitionAccess().getRule();
	}
	
	//LanguageTag:
	//	name=ID;
	public LanguageTagElements getLanguageTagAccess() {
		return pLanguageTag;
	}
	
	public ParserRule getLanguageTagRule() {
		return getLanguageTagAccess().getRule();
	}
	
	//SourceGroup:
	//	'source-group' name=ID '{'
	//	'type' type=[SourceType] ('source' source=STRING)?
	//	logicalSources+=LogicalSource*
	//	'}';
	public SourceGroupElements getSourceGroupAccess() {
		return pSourceGroup;
	}
	
	public ParserRule getSourceGroupRule() {
		return getSourceGroupAccess().getRule();
	}
	
	//LogicalSource:
	//	'logical-source' name=ID '{' ('type' type=[SourceType])? ('source' source=STRING)? ('iterator' iterator=STRING)?
	//	'referenceables' '{'
	//	referencables+=Referenceable*
	//	'}'
	//	'}';
	public LogicalSourceElements getLogicalSourceAccess() {
		return pLogicalSource;
	}
	
	public ParserRule getLogicalSourceRule() {
		return getLogicalSourceAccess().getRule();
	}
	
	//Referenceable:
	//	name=ID value=STRING?;
	public ReferenceableElements getReferenceableAccess() {
		return pReferenceable;
	}
	
	public ParserRule getReferenceableRule() {
		return getReferenceableAccess().getRule();
	}
	
	//Vocabulary:
	//	'vocabulary' name=ID '{'
	//	prefix=Prefix ('classes' classes+=RdfClass*)? ('properties' properties+=RdfProperty*)?
	//	'}';
	public VocabularyElements getVocabularyAccess() {
		return pVocabulary;
	}
	
	public ParserRule getVocabularyRule() {
		return getVocabularyAccess().getRule();
	}
	
	//PrefixHolder:
	//	DatatypesDefinition | Vocabulary;
	public PrefixHolderElements getPrefixHolderAccess() {
		return pPrefixHolder;
	}
	
	public ParserRule getPrefixHolderRule() {
		return getPrefixHolderAccess().getRule();
	}
	
	//Prefix:
	//	'prefix' label=STRING iri=STRING;
	public PrefixElements getPrefixAccess() {
		return pPrefix;
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}
	
	//RdfProperty:
	//	name=ID;
	public RdfPropertyElements getRdfPropertyAccess() {
		return pRdfProperty;
	}
	
	public ParserRule getRdfPropertyRule() {
		return getRdfPropertyAccess().getRule();
	}
	
	//RdfClass:
	//	name=ID;
	public RdfClassElements getRdfClassAccess() {
		return pRdfClass;
	}
	
	public ParserRule getRdfClassRule() {
		return getRdfClassAccess().getRule();
	}
	
	//Mapping:
	//	'map' name=ID 'from' source=[LogicalSource|QualifiedName] '{' ('use-vocabularies'
	//	targetVocabularies+=[Vocabulary|QualifiedName]+ ';'?)?
	//	'subject' subjectIriMapping=TemplateValuedTerm ('types' subjectTypeMappings+=SubjectTypeMapping+ ';'?)? ('properties'
	//	poMappings+=PredicateObjectMapping+)?
	//	'}';
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//SubjectTypeMapping:
	//	type=[RdfClass|QualifiedName];
	public SubjectTypeMappingElements getSubjectTypeMappingAccess() {
		return pSubjectTypeMapping;
	}
	
	public ParserRule getSubjectTypeMappingRule() {
		return getSubjectTypeMappingAccess().getRule();
	}
	
	//PredicateObjectMapping:
	//	property=[RdfProperty|QualifiedName] term=ValuedTerm;
	public PredicateObjectMappingElements getPredicateObjectMappingAccess() {
		return pPredicateObjectMapping;
	}
	
	public ParserRule getPredicateObjectMappingRule() {
		return getPredicateObjectMappingAccess().getRule();
	}
	
	//ValuedTerm:
	//	ReferenceValuedTerm | TemplateValuedTerm | LinkedResourceTerm;
	public ValuedTermElements getValuedTermAccess() {
		return pValuedTerm;
	}
	
	public ParserRule getValuedTermRule() {
		return getValuedTermAccess().getRule();
	}
	
	//// TODO: ConstantValuedTerm
	//ReferenceValuedTerm:
	//	'from' reference=[Referenceable] ('with' 'datatype' datatype=[Datatype] | 'with' 'language-tag'
	//	languageTag=[LanguageTag])?
	//	';'?;
	public ReferenceValuedTermElements getReferenceValuedTermAccess() {
		return pReferenceValuedTerm;
	}
	
	public ParserRule getReferenceValuedTermRule() {
		return getReferenceValuedTermAccess().getRule();
	}
	
	//TemplateValuedTerm:
	//	'template' template=STRING 'with' references+=[Referenceable]+
	//	';'?;
	public TemplateValuedTermElements getTemplateValuedTermAccess() {
		return pTemplateValuedTerm;
	}
	
	public ParserRule getTemplateValuedTermRule() {
		return getTemplateValuedTermAccess().getRule();
	}
	
	//LinkedResourceTerm:
	//	'link' mapping=[Mapping] 'with' references+=[Referenceable]+
	//	';'?;
	public LinkedResourceTermElements getLinkedResourceTermAccess() {
		return pLinkedResourceTerm;
	}
	
	public ParserRule getLinkedResourceTermRule() {
		return getLinkedResourceTermAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
