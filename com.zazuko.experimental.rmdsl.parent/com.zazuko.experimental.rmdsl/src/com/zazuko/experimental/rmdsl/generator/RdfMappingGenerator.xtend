/*
 * generated by Xtext 2.14.0
 */
package com.zazuko.experimental.rmdsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.zazuko.experimental.rmdsl.rdfMapping.Mapping
import java.text.MessageFormat

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RdfMappingGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('mapping.ttl',
			prefixes +
			resource.allContents
				.filter(Mapping)
				.map[triplesMap]
				.join('\n'))
	}
	
	def prefixes() '''
		@prefix rr: <http://www.w3.org/ns/r2rml#>.
		@prefix rml: <http://semweb.mmlab.be/ns/rml#>.
		@prefix ql: <http://semweb.mmlab.be/ns/ql#>.
		
	'''
	
	def triplesMap(Mapping m) '''
		<#«m.name»>
		  rml:logicalSource [
«««		  TODO source might be defined in sourceGroup OR directly in logicalSource
		    rml:source "«m.source.source»" ;
««« TODO		    rml:iterator "/transport/bus";
		    rml:referenceFormulation «m.source.type.referenceFormulation» 
		  ];
		  rr:subjectMap [
		    rr:template "«m.subjectIri»";
		    # rr:class foo:Bar 
		  ];
	    
	'''
	
	def subjectIri(Mapping m) {		
		MessageFormat.format(m.pattern, '''{«m.reference.value»}''');
	}
}
