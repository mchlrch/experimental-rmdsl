grammar com.zazuko.experimental.rmdsl.RdfMapping with org.eclipse.xtext.common.Terminals

generate rdfMapping "http://www.zazuko.com/experimental/rmdsl/RdfMapping"

Domainmodel :
    (elements+=Element)*;
  
Element:
    Import | SourceTypesDefinition | SourceGroup | LogicalSource | Vocabulary | Mapping;

SourceTypesDefinition: {SourceTypesDefinition}
	'source-types' '{'
		(types+=SourceType)*
	'}';

SourceType:
	name=ID 'referenceFormulation' referenceFormulation=STRING;
  
SourceGroup:
    'source-group' name=ID '{'
    	'type' type=[SourceType] ';'
    	('source' source=STRING ';')?
    	(logicalSources+=LogicalSource)*
    '}';
    
LogicalSource:
	'logical-source' name=ID '{'
		('type' type=[SourceType] ';')?
		('source' source=STRING ';')?
		('iterator' iterator=STRING ';')?
		'referenceables' '{'
			(referencables+=Referenceable)*
	    '}'
	'}';

Referenceable:	
    name=ID value=STRING;
    
Vocabulary:	
	'vocabulary' name=ID '{'
    	prefix=Prefix
		('classes' (classes+=RdfClass)* ';')?
	    ('properties' (properties+=RdfProperty)* ';')?	
    '}';
    
Prefix:
	'prefix' label=STRING iri=STRING ';';
    
RdfProperty:
	name=ID;
	
RdfClass:
	name=ID;	
    
Mapping:
	'map' name=ID 'from' source=[LogicalSource|QualifiedName] '{'
		'subject' 'template' pattern=STRING 'with' reference=[Referenceable|QualifiedName]
		 ('types' (subjectTypeMappings+=SubjectTypeMapping)+)?
		 ('properties' (poMappings+=PredicateObjectMapping)+)?
	'}';
	
SubjectTypeMapping:	
	type=[RdfClass|QualifiedName];

PredicateObjectMapping:	
	property=[RdfProperty|QualifiedName] 'from' reference=[Referenceable|QualifiedName];
	
Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;

QualifiedName:
    ID ('.' ID)*;
