/*
 * generated by Xtext 2.14.0
 */
package com.zazuko.experimental.rmdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.zazuko.experimental.rmdsl.ide.contentassist.antlr.internal.InternalRdfMappingParser;
import com.zazuko.experimental.rmdsl.services.RdfMappingGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RdfMappingParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RdfMappingGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RdfMappingGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getPrefixHolderAccess().getAlternatives(), "rule__PrefixHolder__Alternatives");
			builder.put(grammarAccess.getValuedTermAccess().getAlternatives(), "rule__ValuedTerm__Alternatives");
			builder.put(grammarAccess.getReferenceValuedTermAccess().getAlternatives_2(), "rule__ReferenceValuedTerm__Alternatives_2");
			builder.put(grammarAccess.getSourceTypesDefinitionAccess().getGroup(), "rule__SourceTypesDefinition__Group__0");
			builder.put(grammarAccess.getSourceTypeAccess().getGroup(), "rule__SourceType__Group__0");
			builder.put(grammarAccess.getDatatypesDefinitionAccess().getGroup(), "rule__DatatypesDefinition__Group__0");
			builder.put(grammarAccess.getLanguageTagDefinitionAccess().getGroup(), "rule__LanguageTagDefinition__Group__0");
			builder.put(grammarAccess.getSourceGroupAccess().getGroup(), "rule__SourceGroup__Group__0");
			builder.put(grammarAccess.getSourceGroupAccess().getGroup_5(), "rule__SourceGroup__Group_5__0");
			builder.put(grammarAccess.getLogicalSourceAccess().getGroup(), "rule__LogicalSource__Group__0");
			builder.put(grammarAccess.getLogicalSourceAccess().getGroup_3(), "rule__LogicalSource__Group_3__0");
			builder.put(grammarAccess.getLogicalSourceAccess().getGroup_4(), "rule__LogicalSource__Group_4__0");
			builder.put(grammarAccess.getLogicalSourceAccess().getGroup_5(), "rule__LogicalSource__Group_5__0");
			builder.put(grammarAccess.getReferenceableAccess().getGroup(), "rule__Referenceable__Group__0");
			builder.put(grammarAccess.getVocabularyAccess().getGroup(), "rule__Vocabulary__Group__0");
			builder.put(grammarAccess.getVocabularyAccess().getGroup_4(), "rule__Vocabulary__Group_4__0");
			builder.put(grammarAccess.getVocabularyAccess().getGroup_5(), "rule__Vocabulary__Group_5__0");
			builder.put(grammarAccess.getPrefixAccess().getGroup(), "rule__Prefix__Group__0");
			builder.put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
			builder.put(grammarAccess.getMappingAccess().getGroup_5(), "rule__Mapping__Group_5__0");
			builder.put(grammarAccess.getMappingAccess().getGroup_8(), "rule__Mapping__Group_8__0");
			builder.put(grammarAccess.getMappingAccess().getGroup_9(), "rule__Mapping__Group_9__0");
			builder.put(grammarAccess.getPredicateObjectMappingAccess().getGroup(), "rule__PredicateObjectMapping__Group__0");
			builder.put(grammarAccess.getReferenceValuedTermAccess().getGroup(), "rule__ReferenceValuedTerm__Group__0");
			builder.put(grammarAccess.getReferenceValuedTermAccess().getGroup_2_0(), "rule__ReferenceValuedTerm__Group_2_0__0");
			builder.put(grammarAccess.getReferenceValuedTermAccess().getGroup_2_1(), "rule__ReferenceValuedTerm__Group_2_1__0");
			builder.put(grammarAccess.getTemplateValuedTermAccess().getGroup(), "rule__TemplateValuedTerm__Group__0");
			builder.put(grammarAccess.getLinkedResourceTermAccess().getGroup(), "rule__LinkedResourceTerm__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getDomainmodelAccess().getElementsAssignment(), "rule__Domainmodel__ElementsAssignment");
			builder.put(grammarAccess.getSourceTypesDefinitionAccess().getTypesAssignment_3(), "rule__SourceTypesDefinition__TypesAssignment_3");
			builder.put(grammarAccess.getSourceTypeAccess().getNameAssignment_0(), "rule__SourceType__NameAssignment_0");
			builder.put(grammarAccess.getSourceTypeAccess().getReferenceFormulationAssignment_2(), "rule__SourceType__ReferenceFormulationAssignment_2");
			builder.put(grammarAccess.getDatatypesDefinitionAccess().getPrefixAssignment_3(), "rule__DatatypesDefinition__PrefixAssignment_3");
			builder.put(grammarAccess.getDatatypesDefinitionAccess().getTypesAssignment_4(), "rule__DatatypesDefinition__TypesAssignment_4");
			builder.put(grammarAccess.getDatatypeAccess().getNameAssignment(), "rule__Datatype__NameAssignment");
			builder.put(grammarAccess.getLanguageTagDefinitionAccess().getLanguageTagsAssignment_3(), "rule__LanguageTagDefinition__LanguageTagsAssignment_3");
			builder.put(grammarAccess.getLanguageTagAccess().getNameAssignment(), "rule__LanguageTag__NameAssignment");
			builder.put(grammarAccess.getSourceGroupAccess().getNameAssignment_1(), "rule__SourceGroup__NameAssignment_1");
			builder.put(grammarAccess.getSourceGroupAccess().getTypeAssignment_4(), "rule__SourceGroup__TypeAssignment_4");
			builder.put(grammarAccess.getSourceGroupAccess().getSourceAssignment_5_1(), "rule__SourceGroup__SourceAssignment_5_1");
			builder.put(grammarAccess.getSourceGroupAccess().getLogicalSourcesAssignment_6(), "rule__SourceGroup__LogicalSourcesAssignment_6");
			builder.put(grammarAccess.getLogicalSourceAccess().getNameAssignment_1(), "rule__LogicalSource__NameAssignment_1");
			builder.put(grammarAccess.getLogicalSourceAccess().getTypeAssignment_3_1(), "rule__LogicalSource__TypeAssignment_3_1");
			builder.put(grammarAccess.getLogicalSourceAccess().getSourceAssignment_4_1(), "rule__LogicalSource__SourceAssignment_4_1");
			builder.put(grammarAccess.getLogicalSourceAccess().getIteratorAssignment_5_1(), "rule__LogicalSource__IteratorAssignment_5_1");
			builder.put(grammarAccess.getLogicalSourceAccess().getReferencablesAssignment_8(), "rule__LogicalSource__ReferencablesAssignment_8");
			builder.put(grammarAccess.getReferenceableAccess().getNameAssignment_0(), "rule__Referenceable__NameAssignment_0");
			builder.put(grammarAccess.getReferenceableAccess().getValueAssignment_1(), "rule__Referenceable__ValueAssignment_1");
			builder.put(grammarAccess.getVocabularyAccess().getNameAssignment_1(), "rule__Vocabulary__NameAssignment_1");
			builder.put(grammarAccess.getVocabularyAccess().getPrefixAssignment_3(), "rule__Vocabulary__PrefixAssignment_3");
			builder.put(grammarAccess.getVocabularyAccess().getClassesAssignment_4_1(), "rule__Vocabulary__ClassesAssignment_4_1");
			builder.put(grammarAccess.getVocabularyAccess().getPropertiesAssignment_5_1(), "rule__Vocabulary__PropertiesAssignment_5_1");
			builder.put(grammarAccess.getPrefixAccess().getLabelAssignment_1(), "rule__Prefix__LabelAssignment_1");
			builder.put(grammarAccess.getPrefixAccess().getIriAssignment_2(), "rule__Prefix__IriAssignment_2");
			builder.put(grammarAccess.getRdfPropertyAccess().getNameAssignment(), "rule__RdfProperty__NameAssignment");
			builder.put(grammarAccess.getRdfClassAccess().getNameAssignment(), "rule__RdfClass__NameAssignment");
			builder.put(grammarAccess.getMappingAccess().getNameAssignment_1(), "rule__Mapping__NameAssignment_1");
			builder.put(grammarAccess.getMappingAccess().getSourceAssignment_3(), "rule__Mapping__SourceAssignment_3");
			builder.put(grammarAccess.getMappingAccess().getTargetVocabulariesAssignment_5_1(), "rule__Mapping__TargetVocabulariesAssignment_5_1");
			builder.put(grammarAccess.getMappingAccess().getSubjectIriMappingAssignment_7(), "rule__Mapping__SubjectIriMappingAssignment_7");
			builder.put(grammarAccess.getMappingAccess().getSubjectTypeMappingsAssignment_8_1(), "rule__Mapping__SubjectTypeMappingsAssignment_8_1");
			builder.put(grammarAccess.getMappingAccess().getPoMappingsAssignment_9_1(), "rule__Mapping__PoMappingsAssignment_9_1");
			builder.put(grammarAccess.getSubjectTypeMappingAccess().getTypeAssignment(), "rule__SubjectTypeMapping__TypeAssignment");
			builder.put(grammarAccess.getPredicateObjectMappingAccess().getPropertyAssignment_0(), "rule__PredicateObjectMapping__PropertyAssignment_0");
			builder.put(grammarAccess.getPredicateObjectMappingAccess().getTermAssignment_1(), "rule__PredicateObjectMapping__TermAssignment_1");
			builder.put(grammarAccess.getReferenceValuedTermAccess().getReferenceAssignment_1(), "rule__ReferenceValuedTerm__ReferenceAssignment_1");
			builder.put(grammarAccess.getReferenceValuedTermAccess().getDatatypeAssignment_2_0_2(), "rule__ReferenceValuedTerm__DatatypeAssignment_2_0_2");
			builder.put(grammarAccess.getReferenceValuedTermAccess().getLanguageTagAssignment_2_1_2(), "rule__ReferenceValuedTerm__LanguageTagAssignment_2_1_2");
			builder.put(grammarAccess.getTemplateValuedTermAccess().getTemplateAssignment_1(), "rule__TemplateValuedTerm__TemplateAssignment_1");
			builder.put(grammarAccess.getTemplateValuedTermAccess().getReferencesAssignment_3(), "rule__TemplateValuedTerm__ReferencesAssignment_3");
			builder.put(grammarAccess.getLinkedResourceTermAccess().getMappingAssignment_1(), "rule__LinkedResourceTerm__MappingAssignment_1");
			builder.put(grammarAccess.getLinkedResourceTermAccess().getReferencesAssignment_3(), "rule__LinkedResourceTerm__ReferencesAssignment_3");
			builder.put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RdfMappingGrammarAccess grammarAccess;

	@Override
	protected InternalRdfMappingParser createParser() {
		InternalRdfMappingParser result = new InternalRdfMappingParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RdfMappingGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RdfMappingGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
